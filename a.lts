/** Concurrency: State Models and Java Programs
 *             Jeff Magee and Jeff Kramer
 *  
 */
/**
* DRINKS = (red ->coffee->DRINKS 
         |blue->tea   ->DRINKS
         ).

*/

DRINKS = (red ->coffee->DRINKS 
         |blue->tea   ->DRINKS
         ).


GAME = ({one,two} -> S1| three -> win -> GAME),
S1 =(win -> GAME).




MOVE = S0,
S0 = (ahead -> S1),
S1 = (left -> S2 | right -> S0),
S2 = S2.




DOUBLE(N=3) =
 (in[i:1..N] ->
 out[i] ->
 DOUBLE).



ADDER(N=2) =
 (in[i:0..N] ->
 out[i+3] ->
 ADDER).

TRIGGER = (trigger -> o[0] -> trigger -> o[1] -> TRIGGER).




BITSTABLE (N=2) = BITSTABLE[0],
BITSTABLE[i:0..N] = (when(i<N) trigger-> o[i] -> BITSTABLE[i+1]
|when(i==N) trigger -> o[i]->BITSTABLE[0]
 ).



VARIABLE (N=2) = VAR[0], 

VAR[i:0..N] = (write[i2:0..N] -> VAR[i2]  
              | read[i] -> VAR[i]). 




RADIO (M=108) = OFF,
OFF = (on -> MHZ[108]),
MHZ[i:88..108] = (off -> OFF| reset -> MHZ[108]|
scan[j:i-1..108] -> MHZ[j]
).